[project]
name = "stringcase2"
version = "0.1.0"
description = " String case converter. A fork of okunishinishi/python-stringcase."
readme = "README.rst"
license = {text = "MIT"}
authors = [
    {name = "Taka Okunishi", email = "okunishitaka.com@gmail.com"},
    {name = "Berislav Lopac", email = "berislav@lopac.net"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
]

[project.optional-dependencies]
docs = [
    "mkapi>=2.1.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.17",
    "jinja2>=3.1.3",
]

[project.urls]
homepage = "https://stringcase2.readthedocs.io"
repository = "https://github.com/berislavlopac/python-stringcase2"

[tool.isort]
profile = "black"
line_length = 96
filter_files = true
force_alphabetical_sort_within_sections = true

[tool.coverage.run]
source = [ ".", ]
omit = [ "*/tests/*", "src/tests/*", ]

[tool.coverage.report]
skip_covered = false
show_missing = true
fail_under = 90
exclude_lines = [ "pragma: no cover", "@abstract",]

[tool.mypy]
mypy_path = "src/"
files = ["src/"]
ignore_missing_imports = true

[tool.pydocstyle]
add-ignore = "D105, D107, D212, D401"
convention = "google"
match-dir = "(?!tests).*"

[tool.ruff]
line-length = 96
output-format = "grouped"

[tool.ruff.lint]
select = [  # see https://docs.astral.sh/ruff/rules/
    "E4", "E7", "E9",  # basic pycodestyle rules
    "W",     # pycodestyle warnings
    "F",     # Pyflakes rules
    "D",     # pydocstyle checks
    "N",     # PEP8 naming conventions
    "PLR",   # Pylint refactoring recommendations
    "PTH",   # recommends to use pathlib instead of os.path
    "UP",    # pyupgrade suggestions
    "BLE",   # locates blind exception capture
    "B",     # locates possible bugs and design problems
    "A",     # locates shadowing of builtin names
    "C4",    # locates possible issues with comprehensions
    "DTZ",   # locates incorrect use of timezone information
    "PIE",   # miscellaneous linting rules
    "TRY",   # locates potential exception handling antipatterns
    "PERF",  # locates potential performance issues
    "RUF",   # various Ruff-specific linting rules
]
ignore = ["D105", "D107", "D211", "D203", "D212", "D401", "D407", "D413"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "N", "PLR", "DTZ001"]

[tool.pdm.build]
includes = ["stringcase.py"]

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.2.1",
    "pytest-cov>=4.0.0",
    "tox>=3.28.0",
    "tox-pdm>=0.6.1",
]
checks = [
    "isort>=5.12.0",
    "ruff>=0.0.238",
    "mypy>=1.9.0",
]

[tool.pdm.scripts.tests]
cmd = "pytest --cov"
help = "Run unit tests and coverage."

[tool.pdm.scripts.check-lint]
shell = """
    ruff format --check .
    isort --check .
    ruff check .
"""
help = "Run linting and formating checks."

[tool.pdm.scripts.check-typing]
cmd = "mypy --install-types --non-interactive"
help = "Run static typing analysis."

[tool.pdm.scripts.checks]
composite = ["check-lint", "check-typing"]
help = "Run all checks."

[tool.pdm.scripts.ready]
composite = ["check-lint", "check-typing", "tests"]
help = "Run all checks and tests."

[tool.pdm.scripts.reformat]
shell = """
    isort .
    ruff format .
"""
help = "Reformat the code using isort and ruff."

[tool.pdm.scripts.reqs]
shell = "pdm export --prod --without-hashes"
help = "Extract current production requirements. Save to a file with the `-o` option."

[tool.pdm.scripts.new-commits]
shell = "git log $(git describe --tags --abbrev=0)..HEAD --oneline --no-decorate"
help = "List all commits since the last tag."

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
